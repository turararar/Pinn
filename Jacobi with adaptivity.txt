using Plots
using Printf



# Solve the PDE using the Jacobi method on a given grid.
function solve_pde_on_grid(xs, ys; max_iter=10000, tol=1e-6)
    nx, ny = length(xs), length(ys)
    # Assume uniform grid spacing for simplicity.
    hx = xs[2] - xs[1]
    hy = ys[2] - ys[1]
    if abs(hx - hy) > 1e-12
        error("Non-uniform grid spacing not supported in this simple example.")
    end



    # Define the right-hand side function: f(x,y) = 4*(x^2+y^2-1)*exp(-x^2-y^2)
    f(x, y) = 4 * (x^2 + y^2 - 1) * exp(-x^2 - y^2)



    # Initialize the solution arrays
    u = zeros(Float64, nx, ny)
    u_new = similar(u)



    # Set boundary conditions using the analytical solution: u(x,y) = exp(-x^2-y^2)
    for i in 1:nx
        u[i, 1]   = exp(-xs[i]^2 - ys[1]^2)   # bottom boundary (y = ys[1])
        u[i, ny]  = exp(-xs[i]^2 - ys[end]^2)   # top boundary (y = ys[end])
    end
    for j in 1:ny
        u[1, j]   = exp(-xs[1]^2 - ys[j]^2)    # left boundary (x = xs[1])
        u[nx, j]  = exp(-xs[end]^2 - ys[j]^2)    # right boundary (x = xs[end])
    end




    # Jacobi iterations
    for iter in 1:max_iter
        # Update interior points
        for i in 2:nx-1
            for j in 2:ny-1
                u_new[i, j] = 0.25 * (u[i+1, j] + u[i-1, j] +
                                      u[i, j+1] + u[i, j-1] -
                                      hx^2 * f(xs[i], ys[j]))
            end
        end

        # Reapply boundary conditions for u_new
        for i in 1:nx
            u_new[i, 1]  = exp(-xs[i]^2 - ys[1]^2)
            u_new[i, ny] = exp(-xs[i]^2 - ys[end]^2)
        end
        for j in 1:ny
            u_new[1, j]   = exp(-xs[1]^2 - ys[j]^2)
            u_new[nx, j]  = exp(-xs[end]^2 - ys[j]^2)
        end

        # Check convergence by computing the maximum difference between iterations
        diff_val = maximum(abs.(u_new - u))
        u .= u_new  # update solution

        if diff_val < tol
            @printf("Convergence achieved on current grid after %d iterations (diff = %e)\n", iter, diff_val)
            break
        end
    end

    return u
end



# Compute the absolute error with respect to the analytical solution.
function compute_error(u, xs, ys)
    nx, ny = size(u)
    error = zeros(Float64, nx, ny)
    for i in 1:nx, j in 1:ny
        error[i, j] = abs(u[i, j] - exp(-xs[i]^2 - ys[j]^2))
    end
    return error
end



# Refine the grid uniformly if the maximum error exceeds a threshold.
function refine_grid(xs, ys, error, err_threshold)
    if maximum(error) < err_threshold
        return xs, ys  # No refinement needed
    end
    new_nx = 2 * (length(xs) - 1) + 1
    new_ny = 2 * (length(ys) - 1) + 1
    new_xs = collect(range(xs[1], xs[end], length=new_nx))
    new_ys = collect(range(ys[1], ys[end], length=new_ny))
    return new_xs, new_ys
end




# === Main Adaptive Loop ===
# Start with a coarse grid.
xs = collect(range(-4.0, 4.0, length=21))
ys = collect(range(-4.0, 4.0, length=21))
err_threshold = 1e-3
max_adaptive_iters = 3  # Maximum number of adaptive iterations allowed

u = nothing  # To hold the solution

for adapt_iter in 1:max_adaptive_iters
    println("Adaptive iteration ", adapt_iter)
    u = solve_pde_on_grid(xs, ys)
    err = compute_error(u, xs, ys)
    max_err = maximum(err)
    @printf("Maximum error on current grid: %e\n", max_err)
    if max_err < err_threshold
        println("Desired accuracy achieved on adaptive grid.")
        break
    else
        xs, ys = refine_grid(xs, ys, err, err_threshold)
        println("Refining grid: new grid size = ", length(xs), " x ", length(ys))
    end
end





# Final check: ensure that u is computed on the final grid.
if size(u, 1) != length(xs) || size(u, 2) != length(ys)
    println("Final grid has changed; re-solving PDE on final grid.")
    u = solve_pde_on_grid(xs, ys)
end




# Final grid and solution for visualization.
nx, ny = length(xs), length(ys)
u_analytic = [exp(-xs[i]^2 - ys[j]^2) for i in 1:nx, j in 1:ny]
abs_error = abs.(u - u_analytic)


# Visualization of the results:
p1 = plot(xs, ys, u', linetype = :contourf, title = "Adaptive Numerical Solution", xlabel = "x", ylabel = "y")
p2 = plot(xs, ys, u_analytic', linetype = :contourf, title = "Analytical Solution", xlabel = "x", ylabel = "y")
p3 = plot(xs, ys, abs_error', linetype = :contourf, title = "Absolute Error", xlabel = "x", ylabel = "y")
plot(p1, p2, p3, layout = (1, 3), size = (1200, 400))
