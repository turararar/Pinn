using NeuralPDE, Lux, Optimization, OptimizationOptimJL, LineSearches, Plots, OptimizationOptimisers
using ModelingToolkit: Interval



@parameters x y
@variables u(..)
Dxx = Differential(x)^2
Dyy = Differential(y)^2




# 2D PDE
eq = Dxx(u(x, y)) + Dyy(u(x, y)) ~ 4*(x^2 + y^2 - 1)*exp(-x^2 - y^2)



# Boundary conditions
bcs = [u(x, -4.0) ~ exp(-x^2 - 16.0),
       u(x, 4.0) ~ exp(-x^2 - 16.0),
       u(-4.0, y) ~ exp(-16.0 - y^2),
       u(4.0, y) ~ exp(-16.0 - y^2)]



# Space and time domains
domains = [x ∈ Interval(-4.0, 4.0), y ∈ Interval(-4.0, 4.0)]



# Neural network
dim = 2 # number of dimensions
chain = Chain(Dense(dim, 16, σ), Dense(16, 16, σ), Dense(16, 1))

#StochasticTraining(20000, 4000)

# Discretization
discretization = PhysicsInformedNN(
    chain, StochasticTraining(30000, 6000))

@named pde_system = PDESystem(eq, bcs, domains, [x, y], [u(x, y)])
prob = discretize(pde_system, discretization)

global loss_history = Float64[]
global time_history = Float64[]
global start_time = time()



#Callback function(with iteration, time and loss value counting)
callback = function (p, l)
    global loss_history, time_history, start_time

    push!(loss_history, l)

    push!(time_history, time() - start_time)
    
    
    println("$(length(loss_history)), $l, $(time_history[end]) ")
    return false
end

global loss_history = Float64[]
global time_history = Float64[]
global start_time = time()



# Optimizer
res = solve(prob, OptimizationOptimisers.Adam(0.01), maxiters = 400, callback=callback)
phi = discretization.phi



dx = 0.05
xs, ys = [infimum(d.domain):(dx / 10):supremum(d.domain) for d in domains]
analytic_sol_func(x, y) = exp(-x^2 - y^2)

u_predict = reshape([first(phi([x, y], res.u)) for x in xs for y in ys],
    (length(xs), length(ys)))
u_real = reshape([analytic_sol_func(x, y) for x in xs for y in ys],
    (length(xs), length(ys)))
diff_u = abs.(u_predict .- u_real)

p1 = plot(xs, ys, u_real, linetype = :contourf, title = "analytic");
p2 = plot(xs, ys, u_predict, linetype = :contourf, title = "predict");
p3 = plot(xs, ys, diff_u, linetype = :contourf, title = "error");
plot(p1, p2, p3)

plot(time_history, loss_history,
    xlabel="Time (seconds)", ylabel="Loss",
    title="Loss on time", legend=false)