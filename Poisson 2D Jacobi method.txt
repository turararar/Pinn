using Plots
using Printf

# Domain and grid parameters
xmin, xmax = -4.0, 4.0
ymin, ymax = -4.0, 4.0
nx, ny = 81, 81         # number of nodes in x and y directions
hx = (xmax - xmin) / (nx - 1)
hy = (ymax - ymin) / (ny - 1)
# Create coordinate arrays (named xs and ys as in the original document)
xs = [xmin + i * hx for i in 0:nx-1]
ys = [ymin + j * hy for j in 0:ny-1]

# Right-hand side function of the PDE: f(x,y) = 4*(x^2+y^2-1)*exp(-x^2-y^2)
function f(x, y)
    return 4 * (x^2 + y^2 - 1) * exp(-x^2 - y^2)
end

# Initialize the solution arrays
u = zeros(Float64, nx, ny)
u_new = similar(u)

# Set boundary conditions according to the analytical function u(x,y) = exp(-x^2-y^2)
for i in 1:nx
    u[i, 1] = exp(-xs[i]^2 - ymin^2)    # lower boundary (y = -4)
    u[i, ny] = exp(-xs[i]^2 - ymax^2)     # upper boundary (y = 4)
end
for j in 1:ny
    u[1, j] = exp(-xmin^2 - ys[j]^2)      # left boundary (x = -4)
    u[nx, j] = exp(-xmax^2 - ys[j]^2)      # right boundary (x = 4)
end

# Iteration parameters
max_iter = 10000
tol = 1e-6




# Jacobi iterative method
for iter in 1:max_iter
    # Update the solution in the interior points
    for i in 2:nx-1
        for j in 2:ny-1
            u_new[i, j] = 0.25 * (u[i+1, j] + u[i-1, j] + u[i, j+1] + u[i, j-1] - hx^2 * f(xs[i], ys[j]))
        end
    end

    # Update boundary conditions for u_new
    for i in 1:nx
        u_new[i, 1] = exp(-xs[i]^2 - ymin^2)
        u_new[i, ny] = exp(-xs[i]^2 - ymax^2)
    end
    for j in 1:ny
        u_new[1, j] = exp(-xmin^2 - ys[j]^2)
        u_new[nx, j] = exp(-xmax^2 - ys[j]^2)
    end

    # Check convergence
    diff_val = maximum(abs.(u_new - u))
    u .= u_new  # update u

    if diff_val < tol
        @printf("Convergence achieved after %d iterations (diff = %e)\n", iter, diff_val)
        break
    end
end




# Analytical solution: u(x,y) = exp(-x^2-y^2)
u_analytic = [exp(-xs[i]^2 - ys[j]^2) for i in 1:nx, j in 1:ny]

# Compute the absolute error
abs_error = abs.(u - u_analytic)

# Visualization of results in the style of the original document:
p1 = plot(xs, ys, u', linetype = :contourf, title = "Numerical Solution", xlabel = "x", ylabel = "y")
p2 = plot(xs, ys, u_analytic', linetype = :contourf, title = "Analytical Solution", xlabel = "x", ylabel = "y")
p3 = plot(xs, ys, abs_error', linetype = :contourf, title = "Absolute Error", xlabel = "x", ylabel = "y")
plot(p1, p2, p3, layout = (1, 3), size = (1200, 400))
